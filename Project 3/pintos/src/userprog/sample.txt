#include "userprog/syscall.h"
#include <stdio.h>
#include <syscall-nr.h>
#include "threads/interrupt.h"
#include "threads/thread.h"
#include "threads/init.h"
#include "userprog/process.h"
#include "filesys/file.h"
#include "filesys/filesys.h"
#include "devices/input.h"
#include "lib/user/syscall.h"


static void syscall_handler (struct intr_frame *);

void
syscall_init (void) 
{
  intr_register_int (0x30, 3, INTR_ON, syscall_handler, "syscall");
}

static void
syscall_handler (struct intr_frame *f UNUSED) 
{
  /* Start of Project 2 */
  //int syscall_num = *(int *) f->esp;
  int *syscall_num = f->esp;
  struct thread *cur = thread_current ();
  int status, fd;
  struct file *fp, *file;
  struct fd_name *temp_fd, *fd_name;
  struct list_elem *e;
  const char *file_name, *param;
  off_t initial_size;
  void *buffer;
  uint16_t size, count;

  printf ("system call number %d\n", *syscall_num);
  switch (*syscall_num)
  {
    case SYS_HALT: shutdown_power_off ();
    		   break;

    case SYS_EXIT: 
                   status =  *(int *)(f->esp+4);
                   /*param = f->esp + 2;
                   status = *(int *)(*param);*/
     		   printf ("%s: exit(%d)\n", cur->name, status);
		   thread_exit ();
    		   break;

    case SYS_CREATE:
                   file_name = *(char **)(f->esp+4);
		   /*file_name = f->esp + 1;
		   file_name = (char *)*file_name;*/
    		   initial_size = *(off_t *)(f->esp+8);
		   /*param = f->esp + 2;
    		   initial_size = *(off_t *)(*param);*/
                   if (file_name == NULL)
		   {
		     f->eax = 0;
		     printf ("SYS_CREATE failed.\n");
		     break;
		   }
                   f->eax = filesys_create (file_name, initial_size);
                   break;

    case SYS_REMOVE:
                   file_name = *(char **)(f->esp+4);
		   /*file_name = f->esp + 1;
		   file_name = (char *)*file_name;*/
                   //file_name = (char *)*(f->esp + 1);

		   if(file_name == NULL)
		   {
		     f->eax = 0;
		     break;
		   }
                   f->eax = filesys_remove (file_name);
                   break;

    case SYS_OPEN: file_name = *(char **)(f->esp+4);
                   /*file_name = f->esp + 1;
                   file_name = (char *)*file_name;*/
                   //file_name = *(f->esp + 1);

    		   if((file_name == NULL) || !strcmp (file_name, ""))
		   {
		     printf("1");
		     f->eax = -1;
		     break;
		   }
		   if (cur->fd_count >= 64)
		   {
		     printf("2");
		     f->eax = -1;
		     break;
		   }
		   fp = filesys_open (file_name);
		   if (fp == NULL)
		   {
		     printf("3");
		     f->eax = -1;
		     break;
		   }
		   printf("4");
		   temp_fd = (struct fd_name *)malloc (sizeof(struct fd_name));
		   if (list_empty (&(cur->open_files)))
		   {
		     temp_fd->fd = 3;
		   }
		   else
		   {
		     temp_fd->fd = (list_entry (list_rbegin (&(cur->open_files)),
		   			       struct fd_name, elem))->fd + 1;
		   }
		   temp_fd->file_name = file_name;
		   temp_fd->file = fp;
		   list_push_back (&(cur->open_files), &(temp_fd->elem));
		   (cur->fd_count)++;
		   f->eax = temp_fd->fd;
		   break;

    case SYS_FILESIZE:
                   fd = *(int *) (f->esp+4);
                   /*param = f->esp + 2;
                   fd = *(int *)(*param);*/
                   //fd = *(f->esp + 1);

		   if( fd > 2)
		   {
                     fd_name = get_fd_data (fd);
                     if (fd_name != NULL)
                       f->eax = file_length(fd_name->file);
		     else
		       f->eax = 0;
		   }
		   else
		     f->eax = -1;
                   break;
     case SYS_READ:
                   fd = *(int *) (f->esp+4);
		   buffer = (void *)(f->esp+8);
		   size = *(uint16_t *)(f->esp+12);
                   //fd = *(f->esp + 1);
		   //buffer = *(f->esp + 2);
		   //size = *(f->esp + 3);
                   /*param = f->esp + 1;
                   fd = *(int *)(*param);
                   param = f->esp + 2;
                   buffer = (void *)(*param);
                   param = f->esp + 3;
                   size = *(uint16_t *)(*param);*/

		   if (fd == 0)  
		     f->eax = input_getc ();
		   else if (fd == 1 || fd == 2)
		     f->eax = 0;
		   else
		   {
		     printf("1");
		     fd_name = get_fd_data (fd);
		     if (fd_name != NULL)
		       f->eax = file_read (fd_name->file, buffer, size);
		   }
		   break;

    case SYS_WRITE:
                   fd = *(int *) (f->esp+20);
                   buffer = *(char **)(f->esp+24);
                   size = *(uint16_t *)(f->esp+28);
                   //fd = *(f->esp + 1);
		   //buffer = *(f->esp + 2);
		   //size = *(f->esp + 3);
                   /*param = f->esp + 1;
                   fd = *(int *)(*param);
                   param = f->esp + 2;
                   buffer = (void *)(*param);
                   param = f->esp + 3;
                   size = *(uint16_t *)(*param);*/

		   count = size;

                   if (fd == 1)
		   {
		     while (size > 300)
		     {
		       putbuf (buffer, 300);
		       buffer += 300;
		       size -= 300;
		     } 
		     putbuf (buffer, size);
		     f->eax = count; 
		   }
                   else if (fd == 0 || fd == 2)
                     f->eax = 0;
                   else
                   {
                     fd_name = get_fd_data (fd);
                     if (fd_name != NULL)
                       f->eax = file_write (fd_name->file, buffer, size);
                   }
                   break;

    case SYS_SEEK:
                   fd = *(int *) (f->esp+4);
		   initial_size = *(off_t *)(f->esp+8);
                   //fd = *(f->esp + 1);
		   //intial_size = *(f->esp + 2);
                   /*param = f->esp + 1;
                   fd = *(int *)(*param);
                   param = f->esp + 2;
                   initial_size = *(off_t *)(*param);*/

                   if( fd > 2)
                   {
                     fd_name = get_fd_data (fd);
                     if (fd_name != NULL)
                       file_seek(fd_name->file, initial_size);
                   }
                   else
                     f->eax = -1;
                   break;

    case SYS_TELL:
                   fd = *(int *) (f->esp+4);
                   //fd = *(f->esp + 1);
                   /*param = f->esp + 1;
                   fd = *(int *)(*param);*/

                   if( fd > 2)
                   {
                     fd_name = get_fd_data (fd);
                     if (fd_name != NULL)
                       f->eax = file_tell(fd_name->file);
                     else
                       f->eax = 0;
                   }
                   else
                     f->eax = -1;
                   break;


    case SYS_CLOSE:
                   fd = *(int *) (f->esp+4);
                   //fd = *(f->esp + 1);
                   /*param = f->esp + 1;
                   fd = *(int *)(*param);*/

		   fd_name = get_fd_data (fd);
		   if (fd_name != NULL)
		   {
		     file_close(fd_name->file);
		     list_remove (&fd_name->elem);
		     free (fd_name);
		   }
		   break;

    default: f->eax = -1;
  }


  //printf ("Syscall return status is <%d>.\n", *(int *)f->eax);

}




